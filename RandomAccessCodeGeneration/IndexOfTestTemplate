#ifndef RANDOMORDERENUMERATION_{{query_name}}IndexOfTest_H_H
#define RANDOMORDERENUMERATION_{{query_name}}IndexOfTest_H_H

#include <chrono>
#include <unordered_map>
#include <iostream>
#include <fstream>
#include <cassert>
#include "GeneratedRandomAccess/{{query_name}}Index.h"

typedef long long ll;

void print(const vector<int>& v) {
  cout << "[";
  for(int i = 0; i < v.size(); i++){
    cout << (i > 0 ? ", " : "") << v[i];
  }
  cout << "]" << endl;
}

using namespace std;

typedef long long ll;

unordered_map<string, string> readFilenames(const string& filename){
    ifstream f;
    f.open(filename);
    assert(!f.fail()); //assert that opening file succeeded
    
    string tblName, fileName;
    
    unordered_map<string, string> mp;
    while(f >> tblName >> fileName) {
        mp[tblName] = fileName;
    }
    return mp;
}

unordered_map<string, int> readNumLines(const string& filename){
    ifstream f;
    f.open(filename);
    assert(!f.fail()); //assert that opening file succeeded
    
    string tblName;
    int numlines;
    
    unordered_map<string, int> mp;
    while(f >> tblName >> numlines) {
        mp[tblName] = numlines;
    }
    return mp;
}

int main() {
    
    // read unordered_map for files here
    unordered_map<string, string> filenames = readFilenames("filenames.txt");
    
    // read unordered_map for number of lines per table here
    unordered_map<string, int> numlines = readNumLines("numlines.txt");

	{{query_name}}Index inde;
    inde.preprocessing(filenames, numlines);
	cout << "number of answers is " << inde.numAnswers << endl;
	
	ofstream results("answers_and_index_report.txt");
	
	for(ll j = 0; j < inde.numAnswers; j++){
	  {{query_name}}Answer a = inde.access(j);
	  assert(j == inde.index(a));
	  results << a.to_string(); //answer jth
	  results << ", " << inde.index(a) << endl; //testing & index if testing is true
	}
	return 0;
}

#endif //RANDOMORDERENUMERATION_{{query_name}}RANDOMENUMERATIONTEST_H_H